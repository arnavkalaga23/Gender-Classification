# -*- coding: utf-8 -*-
"""gender classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UckDVrDU3j1qLIZqLzDavD6cpFgxTN5F
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import matplotlib.pyplot as plt
import seaborn as sns
import plotly 
import plotly.express as px

import pandas as pd
import numpy as np
import seaborn as sns

import matplotlib.pyplot as plt

from sklearn.preprocessing import LabelEncoder

from sklearn.model_selection import train_test_split

from sklearn.metrics import classification_report, confusion_matrix

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC

ds = pd.read_csv("Transformed Data Set - Sheet1.csv")
X = ds.drop("Gender" , axis =1)
y= ds.Gender

X.head()

X.shape

ds.describe()

X.isnull().sum()

object_cols = [col for col in X.columns if X[col].dtype==object]
print("OBJECT COLUMNS ARE" , object_cols)

num_cols = list(set(X.columns) - set(object_cols))
print("NUMERICAL COLUMNS ARE" , num_cols)

ds[ds["Favorite Color"] == "Cool"]["Gender"].value_counts(normalize=True)

ds[ds["Favorite Color"] == "Warm"]["Gender"].value_counts(normalize=True)

fig = px.histogram(data_frame=ds, x="Favorite Color", color="Gender", width=400, height=400)
fig.show()

fig = px.histogram(data_frame=ds, x="Favorite Music Genre", color="Gender", width=400, height=400)
fig.show()

fig = px.histogram(data_frame=ds, x="Favorite Beverage", color="Gender", width=400, height=400)
fig.show()

ds["Gender"] = ds["Gender"].map(lambda x: 0 if x=="F" else 1)

round(ds.groupby("Favorite Soft Drink")["Gender"].mean(), 2).sort_values(ascending=False)

fig = px.histogram(data_frame=ds, x="Favorite Soft Drink", color="Gender", width=400, height=400)
fig.show()

encoder = LabelEncoder()
project_data = ds.copy()
project_data['Favorite_Color_Transformed'] = encoder.fit_transform(ds['Favorite Color'])
project_data['Favorite_Music_Genre_Transformed'] = encoder.fit_transform(ds['Favorite Music Genre'])
project_data['Favorite_Beverage_Transformed'] = encoder.fit_transform(ds['Favorite Beverage'])
project_data['Favorite_Soft_Drink_Transformed'] = encoder.fit_transform(ds['Favorite Soft Drink'])
project_data['Gender_Transformed'] = encoder.fit_transform(ds['Gender'])

project_data.head()

training_data = project_data.drop(["Favorite Color" , "Favorite Music Genre", "Favorite Beverage", "Favorite Soft Drink" , "Gender"], axis= 1  )
training_data.head()
project_data.head()

corr = project_data.corr()
sns.heatmap(corr)

X = project_data.drop(['Favorite Color','Favorite Music Genre','Favorite Beverage','Favorite Soft Drink','Gender','Gender_Transformed'], axis=1)
Y = project_data['Gender']

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3,random_state=101)

logisticRegression_model = LogisticRegression()
logisticRegression_model.fit(X_train,Y_train)
predict = logisticRegression_model.predict(X_test)
print(classification_report(Y_test,predict))

svc_model = SVC()
svc_model.fit(X_train,Y_train)
predict = svc_model.predict(X_test)

print(classification_report(Y_test,predict))



